<?php

//use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\NestedArray;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;

/**
 * @file
 * Primary module hooks for nk_tools_swiper module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

/**
 * Implements hook_theme().
 */
function nk_tools_swiper_theme() {
  
  $module_handler = Drupal::service('module_handler');
  $path = $module_handler->getModule('nk_tools_swiper')->getPath();
  
  return [
    
    // Swiper container
    'nk_tools_swiper' => [
      'variables' => [
        'view' => NULL,
        'swiper' => [],
      ],
     // 'file' => 'nk_tools_swiper.theme.inc',
    ],

    // Swiper slides list
    'nk_tools_swiper_list' => [
      'variables' => [
        'items' => [],
        'settings' => [],
      ],
      //'file' => 'nk_tools_swiper.theme.inc',
    ],

    // Swiper slide item
    'nk_tools_swiper_list_item' => [
      'variables' => [
        'item' => [],
        'settings' => [],
        'loader' => NULL,
        'caption' => '',
      ],
      //'file' => 'nk_tools_swiper.theme.inc',
    ],

  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function nk_tools_swiper_theme_suggestions_nk_tools_swiper(array $variables) {
  $suggestions = [];
  // Twig templates based on Swiper view data
  if (isset($variables['view']) && $variables['view'] instanceof ViewExecutable) {
    $suggestions[] = 'nk_tools_swiper__view__' . $variables['view']->style_plugin->definition['id'];
    $suggestions[] = 'nk_tools_swiper__view__' . $variables['view']->id();
    $suggestions[] = 'nk_tools_swiper__view__' . $variables['view']->id() .'__' . $variables['view']->current_display;
    $suggestions[] = 'nk_tools_swiper__view__' . $variables['view']->id() .'__' . $variables['view']->style_plugin->definition['id'];
    $suggestions[] = 'nk_tools_swiper__view__' . $variables['view']->id() .'__' . $variables['view']->style_plugin->definition['id'] . '__' . $variables['view']->current_display;
  }
  return $suggestions;  
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function nk_tools_swiper_theme_suggestions_nk_tools_swiper_list(array $variables) {

  $suggestions = [];
  
  // Twig templates based on Swiper view data
  if (isset($variables['items']) && !empty($variables['items']) && isset($variables['items'][0]['slide'])) {
    $data= $variables['items'][0]['slide']; //['#view'];
    if (is_array($data)) {
      $view = isset($data['#view']) && !empty($data['#view']) ? $data['#view'] : NULL;
      if ($view instanceof ViewExecutable) {
        $suggestions[] = 'nk_tools_swiper_list__view__' . $view->style_plugin->definition['id'];
        $suggestions[] = 'nk_tools_swiper_list__view__' . $view->id();
        $suggestions[] = 'nk_tools_swiper_list__view__' . $view->id() .'__' . $view->current_display;
        $suggestions[] = 'nk_tools_swiper_list__view__' . $view->id() .'__' . $view->style_plugin->definition['id'];
        $suggestions[] = 'nk_tools_swiper_list__view__' . $view->id() .'__' . $view->style_plugin->definition['id'] . '__' . $view->current_display;
      }
      else if (isset($data['#node']) && !empty($data['#node'])) {
        if ($data['#node'] instanceof NodeInterface) {
          $suggestions[] = 'nk_tools_swiper_list__view__' . $data['#node']->id();
          $suggestions[] = 'nk_tools_swiper_list__view__' . $data['#node']->getType();
          $suggestions[] = 'nk_tools_swiper_list__view__' . $data['#node']->getType() . '__' . $data['#node']->id();
          if (isset($data['#view_mode'])) {
            $suggestions[] = 'nk_tools_swiper_list__view__' . $data['#view_mode'];
            $suggestions[] = 'nk_tools_swiper_list__view__' . $data['#view_mode'] . '__' . $data['#node']->id();
            $suggestions[] = 'nk_tools_swiper_list__view__' . $data['#node']->getType() . '__' . $data['#view_mode'];
            $suggestions[] = 'nk_tools_swiper_list__view__' . $data['#node']->getType() . '__' . $data['#view_mode'] . '__' . $data['#node']->id();  
          } 
        }
      } 
    }
  }
  return $suggestions;  
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function nk_tools_swiper_theme_suggestions_nk_tools_swiper_list_item(array $variables) {
  
  $suggestions = [];
  // Twig templates based on Swiper view data
  if (isset($variables['item']) && !empty($variables['item'])) {
    $data= $variables['item']; //['#view'];
    if (is_array($data)) {
      $view = isset( $data['#view']) && !empty($data['#view']) ? $data['#view'] : NULL;
      if ($view instanceof ViewExecutable) {
        $suggestions[] = 'nk_tools_swiper_list_item__view__' . $view->style_plugin->definition['id'];
        $suggestions[] = 'nk_tools_swiper_list_item__view__' . $view->id();
        $suggestions[] = 'nk_tools_swiper_list_item___view__' . $view->id() .'__' . $view->current_display;
        $suggestions[] = 'nk_tools_swiper_list_item__view__' . $view->id() .'__' . $view->style_plugin->definition['id'];
        $suggestions[] = 'nk_tools_swiper_list_item__view__' . $view->id() .'__' . $view->style_plugin->definition['id'] . '__' . $view->current_display;
      }
      else if (isset($data['#node']) && !empty($data['#node'])) {
        if ($data['#node'] instanceof NodeInterface) {
          $suggestions[] = 'nk_tools_swiper_list_item__view__' . $data['#node']->id();
          $suggestions[] = 'nk_tools_swiper_list_item__view__' . $data['#node']->getType();
          $suggestions[] = 'nk_tools_swiper_list_item__view__' . $data['#node']->getType() . '__' . $data['#node']->id();
          if (isset($data['#view_mode'])) {
            $suggestions[] = 'nk_tools_swiper_list_item__view__' . $data['#view_mode'];
            $suggestions[] = 'nk_tools_swiper_list_item__view__' . $data['#view_mode'] . '__' . $data['#node']->id();
            $suggestions[] = 'nk_tools_swiper_list_item__view__' . $data['#node']->getType() . '__' . $data['#view_mode'];
            $suggestions[] = 'nk_tools_swiper_list_item__view__' . $data['#node']->getType() . '__' . $data['#view_mode'] . '__' . $data['#node']->id();  
          } 
        }
      }  
    }
  }
  return $suggestions;  
}


/**
 * Prepares variables for swiper template.
 *
 * Default template: templates/swiper.html.twig.
 */
function template_preprocess_nk_tools_swiper(&$variables) {

  $view = isset($variables['view']) ? $variables['view'] : NULL;

  if ($view) {
    $style = $view->style_plugin;
    $options = $style->options;

    $variables['view'] = $view;

    $settings = [
      'options' => $style->options['swiper_template'],
    ];
    $settings['swiper_options'] = isset($style->swiper_storage['swiper_options']) ? $style->swiper_storage['swiper_options'] : [];
    $settings['swiper_options']['attributes'] = [
      'id' => isset($variables['swiper']) && !empty($variables['swiper']) && !empty($variables['swiper']['swiper_id']) ?  $variables['swiper']['swiper_id'] : $style->options['id'], 
      'class' =>  $style->options['css_class'],     
    ];
    foreach ($variables['rows'] as $row) {
      // Set row into a slide.
      $item['slide'] = $row; //render($row);
      $items[] = $item;
    }
  }
  else {
    // Reference configuration variables.
    $settings = $variables['swiper']['settings'];
    $items = &$variables['swiper']['items'];
  }

  $config = isset($settings['swiper_options']) ? $settings['swiper_options'] : $settings;

  // Take care of Swiper navigation, unset other properties if main flag (checkbox) is on
  $navigation = $config['navigation']['navigation_enabled'];
  if (!$navigation) {
    unset($config['navigation']);
  }

  // Take care of Swiper pagination, unset other properties if main flag (checkbox) is on
  $pagination = $config['pagination']['pagination_enabled'];
  if (!$pagination) {
    unset($config['pagination']);
  }

  $settings['attributes'] = isset($config['attributes']) && !empty($config['attributes']) ? $config['attributes'] : $settings['attributes'];
  $settings['image_style'] = isset($settings['image_style']) && !empty($settings['image_style']) ? $settings['image_style'] : NULL;

  // Configure attributes for containing elements.
  $attributes = $variables['attributes'];

  // Merge with defined attributes.
  if (isset($settings['attributes']) && is_array($settings['attributes'])) {
    $attributes = NestedArray::mergeDeep($attributes, $settings['attributes']);
  }

  // Add the swiper class to be namespaced.
  $attributes['class'] = [];
  $attributes['class'][] = 'swiper-container';

  // Add the options name as a class to the container.
  if (isset($config['id'])) {
   $attributes['class'][] = 'options-' . Html::getClass($config['id']); 
  }

  // Add the image style name as a class to the container.
  if (!empty($settings['image_style'])) {
    $attributes['class'][] = 'imagestyle-' . Html::getClass($settings['image_style']);
  }

  // Pass attributes to twig.
  $variables['attributes'] = new Attribute($attributes);

  // Add the list render array.
  $variables['content']['list'] = [
    '#theme' => 'nk_tools_swiper_list',
    '#items' => $items,
    '#settings' => $config,
  ];

  $variables['options'] = $config;

  if ($navigation) {
    $variables['options']['navigation_classes'] = [
      'prev' => ltrim($config['navigation']['prevEl'], '.'), 
      'next' => ltrim($config['navigation']['nextEl'], '.'), 
    ];
  }

  $variables['options']['pagination_classes'] = $pagination ? ltrim($config['pagination']['el'], '.') : ''; 
  $variables['options']['pagination_classes'] .= $pagination && $config['direction'] == 'vertical' ? ' right' : '';
  //$variables['#attached']['library'][] = 'nk_tools_swiper/swiper';
  //$variables['#attached']['library'][] = 'nk_tools_swiper/nk_tools_swiper_swiper'; 
}

/**
 * Prepares variables for swiper list template.
 *
 * Default template: templates/nk-tools-swiper-list.html.twig.
 */
function template_preprocess_nk_tools_swiper_list(&$variables) {
  // Reference configuration variables.
  $options = &$variables['settings']['options'];
  
  $items = &$variables['items'];

  $attributes = &$variables['attributes'];
  $attributes['class'][] = 'swiper-wrapper';
  $attributes = new Attribute($attributes);

  // Build the list.
  $variables['content']['list'] = [];
  if (!empty($items)) {
    foreach ($items as $i => $item) {
      $caption = '';
      if (!empty($item['caption'])) {
        $caption = $item['caption'];
      }

      // Add the list item render array.
      $variables['content']['list'][$i] = [
        '#theme' => 'nk_tools_swiper_list_item',
        '#item' => $item['slide'],
        '#loader' => isset($item['loader']) ? $item['loader'] : NULL,
        '#caption' => $caption,
        '#settings' => [
          'options' => $options,
        ],
      ];
    }
  }
}

/**
 * Prepares variables for swiper list item template.
 *
 * Default template: templates/nk-tools-swiper-list-item.html.twig.
 */
function template_preprocess_nk_tools_swiper_list_item(&$variables) {

  // Reference configuration variables.
  $item = &$variables['item'];
  $settings = &$variables['settings'];
  $caption = &$variables['caption'];
  $attributes = &$variables['attributes'];
  $options = $settings['options'];

  // Add swiper slide item class.
  $attributes['class'][] = 'swiper-slide';

  $variables['attributes'] = new Attribute($attributes);

   // Generated thumbnail support.
  // @TODO review this piece of code.
  /*
  if ($options->getOption('controlNav') === "thumbnails") {
    // If the thumbnails are enabled in the options,
    // extract the url to set as the thumbnail data.
    $src = [];
    if (!preg_match("/<img.+?src=[\"'](.+?)[\"'].+?>/", $item, $src)) {
      preg_match("/<img.+?srcset=[\"'](.+?)[\"'].+?>/", $item, $src);
    }

    if (!empty($src[1])) {
      $attributes['data-thumb'] = $src[1];
    }

    // Let's also get the alt attribute to apply to thumbnails.
    // This only works in library version 2.6+.
    $alt = [];
    preg_match("/<img.+?alt=[\"'](.+?)[\"'].+?>/", $item, $alt);

    if (!empty($alt)) {
      $attributes['data-thumb-alt'] = $alt[1];
    }
  }

  if ($options->getOption('thumbCaptions') and !empty($caption)) {
    $attributes['data-thumbcaption'] = $caption;
    // Prevent captions from appearing in the slider as well.
    if (FALSE === $options->getOption('thumbCaptionsBoth')) {
      $caption = '';
    }
  }
  */
}

